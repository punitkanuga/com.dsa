/*
https://leetcode.com/submissions/detail/1010387972/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals,
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

*/

class Solution {
    public int[][] merge(int[][] intervals) {

        // handling cases with intervals array being empty or having only one element
        if(intervals.length<2) {
            return intervals;
        }

        // sorting intervals array based on first element to visualise interval tree plotted
        Arrays.sort(intervals, (a,b) -> a[0]-b[0]);
        ArrayList<int[]> ans = new ArrayList<>();

        for(int i=0;i<intervals.length;i++) {

            // handling cases when only last element is left, to handle index out to bound exception
            if(i+1 == intervals.length) {
               ans.add(intervals[i]);
               return ans.toArray(new int[0][]); 
            }

            if(intervals[i][1] >= intervals[i+1][0]) {
                // if overlap, create new combined value and place it in next index of 
                // interval array to traverse further
                int[] temp = new int[2];
                temp[0] = Math.min(intervals[i][0], intervals[i+1][0]);
                temp[1] = Math.max(intervals[i][1], intervals[i+1][1]);

                intervals[i+1] = temp;
            } else {
                // if no overlap, add only first element as the second one can get overlapped with
                // the upcoming third element
                ans.add(intervals[i]);
            }
        }

        return ans.toArray(new int[0][]);
    }
}
